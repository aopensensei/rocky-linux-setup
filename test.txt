----- setup_rocky_linux9.sh -----
#!/bin/bash

# カラーディスプレイ定義
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RESET="\033[0m"

# リポジトリURL（正しいGitHubのリポジトリURLを設定）
REPO_URL="https://github.com/aopensensei/rocky-linux-setup.git"
REPO_DIR="rocky-linux-setup"

# 進捗表示関数
deploy_status() {
    local message=$1
    local color=$2
    echo -e "${color}${message}${RESET}"
}

# メイン処理
clear

# 必要なツールのインストール
deploy_status "Installing required tools (git, sshpass, ansible)..." $YELLOW
sudo dnf install -y epel-release
sudo dnf install -y git sshpass ansible
if [ $? -ne 0 ]; then
    deploy_status "Failed to install required tools. Please check your network connection or package manager." $RED
    exit 1
fi

# リポジトリのクローン
deploy_status "Cloning the repository for playbook and configuration files..." $YELLOW
if [ -d "$REPO_DIR" ]; then
    deploy_status "Repository already exists. Pulling latest changes..." $CYAN
    cd "$REPO_DIR" && git pull origin main
else
    git clone "$REPO_URL"
    cd "$REPO_DIR"
fi

# IPアドレスの入力
deploy_status "Enter IP addresses..." $CYAN
echo "Please enter the IP address for the DMZ server (srv01):"
read dmz_ip
echo "Please enter the IP address for the control server:"
read control_ip

# `odp`ユーザのパスワード入力
deploy_status "Enter the password for the odp user..." $CYAN
read -s odp_password

# IPアドレスの検証と反映
if [[ $dmz_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ $control_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    deploy_status "Updating inventory file with new IP addresses..." $GREEN
    # inventoryテンプレートファイルと出力ファイルのパス
    inventory_template="playbook/inventory.ini.template"
    inventory_file="playbook/inventory.ini"

    # テンプレートをもとにinventoryファイルを作成
    sed "s/<dmz_ip>/$dmz_ip/g; s/<dmz_password>/$odp_password/g; s/<control_ip>/$control_ip/g; s/<control_password>/$odp_password/g" "$inventory_template" > "$inventory_file"
else
    deploy_status "Invalid IP address. Please try again." $RED
    exit 1
fi

# ホスト名の設定
deploy_status "Setting hostname for DMZ server (srv01)..." $YELLOW
sshpass -p "$odp_password" ssh -o StrictHostKeyChecking=no "odp@$dmz_ip" "echo '$odp_password' | sudo -S hostnamectl set-hostname srv01"
if [ $? -ne 0 ]; then
    deploy_status "Failed to set hostname for DMZ server." $RED
    exit 1
fi

# Ansibleプレイブックの実行
deploy_status "Running Ansible playbook to set up DMZ server as a web server..." $GREEN
ANSIBLE_PASSWORD="$odp_password"
sshpass -p "$ANSIBLE_PASSWORD" ansible-playbook -i $inventory_file playbook/dmz_srv01/dmz_srv01_setup.yml --user=odp --ask-become-pass --extra-vars "ansible_ssh_pass=$ANSIBLE_PASSWORD"
if [ $? -ne 0 ]; then
    deploy_status "Failed to run Ansible playbook." $RED
    exit 1
fi

deploy_status "DMZ server setup complete!" $GREEN

# 終了メッセージ
deploy_status "Setup script finished successfully." $CYAN


----- playbook/inventory.ini.template -----
[dmz]
<dmz_ip> ansible_user=odp ansible_password=<dmz_password> ansible_python_interpreter=/usr/bin/python3

[control]
<control_ip> ansible_user=odp ansible_password=<control_password>


----- playbook/dmz_srv01/dmz_srv01_setup.yml -----
- name: Setup DMZ server for WordPress
  hosts: dmz
  become: yes
  gather_facts: yes

  roles:
    - role: account_setup
    - role: middleware_install
    - role: wordpress_setup


----- playbook/dmz_srv01/roles/account_setup/tasks/main.yml -----
---
# tasks file for account_setup

- name: Create users with default skel
  user:
    name: "{{ item }}"
    password: "{{ user_password | password_hash('sha512') }}"
    state: present
    create_home: yes
    shell: /bin/bash
  loop: "{{ users }}"

- name: Add users to sudo group
  user:
    name: "{{ item }}"
    groups: wheel
    append: yes
  loop: "{{ users }}"


----- playbook/dmz_srv01/roles/account_setup/vars/main.yml -----
---
users:
  - user01
  - user02
  - user03
  - user04
  - user05
  - user06
  - user07
  - user08
  - user09
  - user10
user_password: "Hard-ing0"


----- playbook/dmz_srv01/roles/middleware_install/handlers/main.yml -----
---
# handlers file for middleware_install

- name: Restart mariadb
  service:
    name: mariadb
    state: restarted


----- playbook/dmz_srv01/roles/middleware_install/tasks/main.yml -----
---
# tasks file for middleware_install

- name: Install required packages
  yum:
    name: "{{ packages }}"
    state: present

- name: Stop and disable firewalld
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: Start and enable services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - nginx
    - mariadb
    - php-fpm


----- playbook/dmz_srv01/roles/middleware_install/vars/main.yml -----
---
packages:
  - epel-release
  - nginx
  - mariadb-server
  - python3
  - python3-PyMySQL
  - php
  - php-fpm
  - php-mysqlnd
  - php-gd
  - unzip
  - tar
  - curl
  - php-cli
  - php-mbstring
  - php-xml


----- playbook/dmz_srv01/roles/wordpress_setup/tasks/main.yml -----
---
# tasks file for wordpress_setup

- name: Change root authentication plugin to mysql_native_password
  become_user: root
  mysql_user:
    name: root
    host: localhost
    password: "{{ mariadb_root_password }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
    plugin: mysql_native_password
    priv: '*.*:ALL,GRANT'
    state: present

- name: Create database for WordPress
  become_user: root
  mysql_db:
    name: "{{ wordpress_db_name }}"
    state: present
    login_user: root
    login_password: "{{ mariadb_root_password }}"

- name: Configure MariaDB user for WordPress
  become_user: root
  mysql_user:
    name: "{{ wordpress_db_user }}"
    password: "{{ wordpress_db_password }}"
    priv: "{{ wordpress_db_name }}.*:ALL"
    host: localhost
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: present

- name: Download WordPress
  get_url:
    url: https://ja.wordpress.org/latest-ja.tar.gz
    dest: /tmp/latest-ja.tar.gz
    force: no

- name: Extract WordPress
  unarchive:
    src: /tmp/latest-ja.tar.gz
    dest: /var/www/html/
    remote_src: yes
    extra_opts: [--strip-components=1]

- name: Generate WordPress authentication keys and salts
  set_fact:
    auth_key: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,special') }}"
    secure_auth_key: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,special') }}"
    logged_in_key: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,special') }}"
    nonce_key: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,special') }}"
    auth_salt: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,special') }}"
    secure_auth_salt: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,special') }}"
    logged_in_salt: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,special') }}"
    nonce_salt: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits,special') }}"

- name: Configure wp-config.php
  template:
    src: wp-config.php.j2
    dest: /var/www/html/wp-config.php
    owner: nginx
    group: nginx
    mode: '0644'

- name: Set permissions for WordPress directories
  file:
    path: "{{ item.path }}"
    owner: nginx
    group: nginx
    mode: "{{ item.mode }}"
    recurse: yes
  loop:
    - { path: '/var/www/html', mode: '0755' }
    - { path: '/var/www/html/wp-content', mode: '0755' }
    - { path: '/var/www/html/wp-content/uploads', mode: '0755' }

- name: Download WP-CLI
  get_url:
    url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    dest: /usr/local/bin/wp
    mode: '0755'

- name: Install WordPress with WP-CLI
  shell: |
    wp core install \
      --url="{{ wordpress_site_url }}" \
      --title="{{ wordpress_site_title }}" \
      --admin_user="{{ wordpress_admin_user }}" \
      --admin_password="{{ wordpress_admin_password }}" \
      --admin_email="{{ wordpress_admin_email }}" \
      --skip-email
  args:
    chdir: /var/www/html
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

# Nginx の設定を追加
- name: Configure Nginx for WordPress
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  notify:
    - Restart nginx

# 必要に応じて PHP-FPM の再起動タスクを追加
- name: Restart PHP-FPM
  service:
    name: php-fpm
    state: restarted


----- playbook/dmz_srv01/roles/wordpress_setup/templates/nginx.conf.j2 -----
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        root /var/www/html;
        index index.php index.html index.htm;

        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
            fastcgi_pass   unix:/run/php-fpm/www.sock;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }
}


----- playbook/dmz_srv01/roles/wordpress_setup/templates/wp-config.php.j2 -----
<?php
define( 'DB_NAME', '{{ wordpress_db_name }}' );
define( 'DB_USER', '{{ wordpress_db_user }}' );
define( 'DB_PASSWORD', '{{ wordpress_db_password }}' );
define( 'DB_HOST', '{{ wordpress_db_host }}' );
define( 'DB_CHARSET', 'utf8' );
define( 'DB_COLLATE', '' );

/**#@+
 * Authentication Unique Keys and Salts.
 */
define( 'AUTH_KEY',         '{{ auth_key }}' );
define( 'SECURE_AUTH_KEY',  '{{ secure_auth_key }}' );
define( 'LOGGED_IN_KEY',    '{{ logged_in_key }}' );
define( 'NONCE_KEY',        '{{ nonce_key }}' );
define( 'AUTH_SALT',        '{{ auth_salt }}' );
define( 'SECURE_AUTH_SALT', '{{ secure_auth_salt }}' );
define( 'LOGGED_IN_SALT',   '{{ logged_in_salt }}' );
define( 'NONCE_SALT',       '{{ nonce_salt }}' );
/**#@-*/

$table_prefix = 'wp_';

define( 'WP_DEBUG', false );

if ( ! defined( 'ABSPATH' ) ) {
    define( 'ABSPATH', __DIR__ . '/' );
}

require_once ABSPATH . 'wp-settings.php';


----- playbook/dmz_srv01/roles/wordpress_setup/vars/main.yml -----
---
mariadb_root_password: "Hard-ing0"
wordpress_db_name: "wordpress_db"
wordpress_db_user: "admin_wp"
wordpress_db_password: "Hard-ing0"
wordpress_db_host: "localhost"  # 追加
wordpress_site_url: "http://{{ ansible_default_ipv4.address }}"
wordpress_site_title: "My WordPress Site"
wordpress_admin_user: "admin"
wordpress_admin_password: "admin_password"
wordpress_admin_email: "admin@example.com"


